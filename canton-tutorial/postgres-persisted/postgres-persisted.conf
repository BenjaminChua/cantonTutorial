_shared {
  storage {
    type = postgres
    config {
      dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
      properties = {
        serverName = "localhost"
        # the next line will override above "serverName" in case the environment variable POSTGRES_HOST exists
        serverName = ${?POSTGRES_HOST}
        portNumber = "5432"
        portNumber = ${?POSTGRES_PORT}
        # the next line will fail configuration parsing if the POSTGRES_USER environment variable is not set
        user = ${POSTGRES_USER}
        password = ${POSTGRES_PASSWORD}

        # The following settings can be used to configure an SSL connection to the Postgres DB
        # ssl = true
        # Will verify that the server certificate is trusted
        # sslmode= "verify-ca" # Other options and their meaning can be found https://jdbc.postgresql.org/documentation/head/ssl-client.html

        # Optionally set with path to root certificate. Not necessary if the server certificate can be verified using the JRE root certificates
        # sslrootcert = "path/to/root.cert"

        # For mTLS:
        # sslcert= "path/to/client-cert.pem"
        # sslkey= "path/to/client-key.p12"
      }
    }
  }
}

canton {
  participants {
    participant1 {
      storage = ${_shared.storage}
      storage.config.properties.databaseName = "participant1"
      admin-api.port = 5012
      ledger-api.port = 5011
    }
    participant2 {
      storage = ${_shared.storage}
      storage.config.properties.databaseName = "participant2"
      admin-api.port = 5022
      ledger-api.port = 5021
    }
  }
  domains {
    domain1 {
      storage = ${_shared.storage}
      storage.config.properties.databaseName = "domain1"
      public-api.port = 5018
      admin-api.port = 5019
    }
  }
  // enable ledger_api commands for our getting started guide
  features.enable-testing-commands = yes
}
